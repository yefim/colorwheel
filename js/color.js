// Generated by CoffeeScript 1.3.3
(function() {
  var Color;

  window.parseColor = function(c) {
    var color, hex_regex, rgb_regex, single_regex;
    if (c.charAt(0) === "#") {
      c = c.substr(1);
    }
    hex_regex = /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/;
    rgb_regex = /^rgb\s*\(([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]),\s*([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]),\s*([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\)$/i;
    single_regex = /^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]),\s*([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]),\s*([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$/;
    color = [];
    color = c.match(hex_regex);
    if (color != null) {
      return new Color(toRGB(color[1]), toRGB(color[2]), toRGB(color[3]));
    }
    color = c.match(rgb_regex);
    if (color != null) {
      return new Color(color[1], color[2], color[3]);
    }
    color = c.match(single_regex);
    if (color != null) {
      return new Color(color[1], color[2], color[3]);
    }
  };

  Color = (function() {

    function Color(r, g, b) {
      this.red = r;
      this.green = g;
      this.blue = b;
      this.rgb = "" + r + ", " + g + ", " + b;
    }

    Color.prototype.toString = function() {
      return "rgb(" + this.rgb + ")";
    };

    Color.prototype.convert = function(into) {
      switch (into) {
        case "rgb":
          return this.toString();
        case "hex":
          return "#" + (toHex(this.red)) + (toHex(this.green)) + (toHex(this.blue));
        case "red":
          return this.red;
        case "green":
          return this.green;
        case "blue":
          return this.blue;
      }
    };

    return Color;

  })();

  window.toRGB = function(num) {
    return parseInt(num, 16);
  };

  window.toHex = function(num) {
    var hex;
    hex = parseInt(num, 10).toString(16).toUpperCase();
    if (hex.length === 1) {
      return "0" + hex;
    } else {
      return hex;
    }
  };

}).call(this);
